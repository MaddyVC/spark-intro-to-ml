{
  "paragraphs": [
    {
      "text": "%md\n## Loading and Further Transforming our Data\n1. For fun you can open a new terminal window and monitor what Redis is doing with `docker exec -it redis5 redis-cli monitor`",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:44:42.325",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eLoading and Further Transforming our Data\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eFor fun you can open a new terminal window and monitor what Redis is doing with \u003ccode\u003edocker exec -it redis5 redis-cli monitor\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581983049097_-1643844197",
      "id": "20200217-234409_499582471",
      "dateCreated": "2020-02-17 23:44:09.097",
      "dateStarted": "2020-02-18 23:44:42.338",
      "dateFinished": "2020-02-18 23:44:42.384",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport spark.implicits._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\n\nval netflixDataSchemaWithDates \u003d \"`show_id` BIGINT,`type` STRING,`title` STRING,`director` STRING,`cast` STRING,`country` STRING,`date_added` STRING,`release_year` INT,`rating` STRING,`duration` STRING,`listed_in` STRING,`description` STRING,`datetime` TIMESTAMP,`release_month` STRING,`release_day` STRING\"\n\nval netflixSchema \u003d StructType.fromDDL(netflixDataSchemaWithDates)\n\nval netflixDataFromRedis \u003d spark.read\n  .format(\"org.apache.spark.sql.redis\")\n  .schema(netflixSchema)\n  .option(\"key.column\", \"show_id\")\n  .option(\"table\", \"netflix_norm\")\n  //.option(\"filter.keys.by.type\", \"true\")\n  .load()",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:02.441",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581975262319_-110634120",
      "id": "20200217-213422_690553549",
      "dateCreated": "2020-02-17 21:34:22.319",
      "dateStarted": "2020-02-18 22:56:02.786",
      "dateFinished": "2020-02-18 22:56:06.441",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nnetflixDataFromRedis.createOrReplaceTempView(\"netflix_redis\")",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:06.475",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581975684444_-1324358012",
      "id": "20200217-214124_1997688180",
      "dateCreated": "2020-02-17 21:41:24.444",
      "dateStarted": "2020-02-18 22:56:06.750",
      "dateFinished": "2020-02-18 22:56:07.581",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect show_id, release_year, rating from netflix_redis",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:07.646",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "show_id": "string",
                      "type": "string",
                      "title": "string",
                      "director": "string",
                      "cast": "string",
                      "country": "string",
                      "date_added": "string",
                      "release_year": "string",
                      "rating": "string",
                      "duration": "string",
                      "listed_in": "string",
                      "description": "string",
                      "datetime": "string",
                      "release_month": "string",
                      "release_day": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": true
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "release_year",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "rating",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "show_id",
                  "index": 0.0,
                  "aggr": "count"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581975727557_323861174",
      "id": "20200217-214207_1116422692",
      "dateCreated": "2020-02-17 21:42:07.557",
      "dateStarted": "2020-02-18 22:56:07.946",
      "dateFinished": "2020-02-18 22:56:10.135",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Explore the Content by Category (listed_in)\n1. By using the split with explode we can create multiple rows for each show\n2. This will allow us to create a category lookup table",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:44:46.003",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eExplore the Content by Category (listed_in)\u003c/h3\u003e\n\u003col\u003e\n  \u003cli\u003eBy using the split with explode we can create multiple rows for each show\u003c/li\u003e\n  \u003cli\u003eThis will allow us to create a category lookup table\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581980186150_-973772520",
      "id": "20200217-225626_1720464443",
      "dateCreated": "2020-02-17 22:56:26.150",
      "dateStarted": "2020-02-18 23:44:46.015",
      "dateFinished": "2020-02-18 23:44:46.147",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval netflixDataByCategory \u003d spark.sql(\"select show_id, type, rating, release_year, release_month, explode(split(listed_in, \u0027,\u0027)) as category from netflix_redis\")\n  .withColumn(\"category_clean\", trim(col(\"category\")))\n  .drop(\"category\")\n  .withColumnRenamed(\"category_clean\", \"category\")\n  \nnetflixDataByCategory.createOrReplaceTempView(\"netflix_categories\")",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:10.643",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "show_id": "string",
                      "rating": "string",
                      "category": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581975756886_-2025390413",
      "id": "20200217-214236_746602221",
      "dateCreated": "2020-02-17 21:42:36.887",
      "dateStarted": "2020-02-18 22:56:10.887",
      "dateFinished": "2020-02-18 22:56:11.989",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nnetflixDataByCategory.select(\"category\").distinct.sort(asc(\"category\")).show(100, false)",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:11.996",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581981155113_1339318087",
      "id": "20200217-231235_656574797",
      "dateCreated": "2020-02-17 23:12:35.113",
      "dateStarted": "2020-02-18 22:56:12.345",
      "dateFinished": "2020-02-18 22:56:19.578",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nnetflixDataByCategory.select(\"rating\").where(col(\"rating\").isNotNull).distinct.sort(asc(\"rating\")).show(100, false)",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:19.647",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581982480201_817652323",
      "id": "20200217-233440_561105347",
      "dateCreated": "2020-02-17 23:34:40.201",
      "dateStarted": "2020-02-18 22:56:19.885",
      "dateFinished": "2020-02-18 22:56:28.651",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect count(*) as total, category from netflix_categories where type \u003d \"Movie\" group by category order by category asc",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:28.717",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "total": "string",
                      "category": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "lineChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default"
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": false
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "category",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "total",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581980939199_-77283799",
      "id": "20200217-230859_52135013",
      "dateCreated": "2020-02-17 23:08:59.199",
      "dateStarted": "2020-02-18 22:56:29.068",
      "dateFinished": "2020-02-18 22:56:35.877",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect count(*) as total, category from netflix_categories where type \u003d \"Movie\" and release_year in (2018, 2019, 2020) group by category order by total desc\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:35.973",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "scatterChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "total": "string",
                      "category": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "rotate"
                },
                "scatterChart": {
                  "xAxis": {
                    "name": "total",
                    "index": 0.0,
                    "aggr": "sum"
                  },
                  "yAxis": {
                    "name": "total",
                    "index": 0.0,
                    "aggr": "sum"
                  },
                  "group": {
                    "name": "category",
                    "index": 1.0,
                    "aggr": "sum"
                  },
                  "size": {
                    "name": "total",
                    "index": 0.0,
                    "aggr": "sum"
                  }
                }
              },
              "keys": [
                {
                  "name": "category",
                  "index": 1.0,
                  "aggr": "sum"
                }
              ],
              "groups": [],
              "values": [
                {
                  "name": "total",
                  "index": 0.0,
                  "aggr": "max"
                }
              ],
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581980066397_354439053",
      "id": "20200217-225426_653677043",
      "dateCreated": "2020-02-17 22:54:26.397",
      "dateStarted": "2020-02-18 22:56:36.228",
      "dateFinished": "2020-02-18 22:56:44.395",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval dataMining \u003d netflixDataByCategory\n  .groupBy(\"release_year\",\"type\", \"category\", \"rating\")\n  .agg(count(col(\"show_id\")) as \"total\")\n  .sort(desc(\"total\"))\n\ndataMining.createOrReplaceTempView(\"mining_netflix\")",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:44.402",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581980429321_-1063601712",
      "id": "20200217-230029_1342404834",
      "dateCreated": "2020-02-17 23:00:29.321",
      "dateStarted": "2020-02-18 22:56:44.637",
      "dateFinished": "2020-02-18 22:56:45.793",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect * from mining_netflix",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:45.837",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "scatterChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "release_year": "string",
                      "type": "string",
                      "category": "string",
                      "rating": "string",
                      "total": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "scatterChart": {
                  "xAxis": {
                    "name": "release_year",
                    "index": 0.0,
                    "aggr": "sum"
                  },
                  "yAxis": {
                    "name": "rating",
                    "index": 3.0,
                    "aggr": "sum"
                  },
                  "size": {
                    "name": "total",
                    "index": 4.0,
                    "aggr": "sum"
                  }
                }
              }
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581981737849_-1643070075",
      "id": "20200217-232217_225550733",
      "dateCreated": "2020-02-17 23:22:17.849",
      "dateStarted": "2020-02-18 22:56:46.187",
      "dateFinished": "2020-02-18 22:56:52.988",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Exercise: Come up with Category groups to reduce the number of categories across TV Shows and Movies\n1. Think about how the categories (Horror Movies, Thrillers, TV Thrillers, TV Horror) could be grouped with the ratings (TV-MA, NC-17, R)\n2. Can the categories (Children \u0026 Family Movies, Kids\u0027 TV) could be grouped with the ratings (TV-G, TV-Y7, G, PG, TV-Y7-FV)\n3. Would coming up with an Integer value for each category and rating help you? Consider enum style encoding",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:44:51.220",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eExercise: Come up with Category groups to reduce the number of categories across TV Shows and Movies\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eThink about how the categories (Horror Movies, Thrillers, TV Thrillers, TV Horror) could be grouped with the ratings (TV-MA, NC-17, R)\u003c/li\u003e\n  \u003cli\u003eCan the categories (Children \u0026amp; Family Movies, Kids\u0026rsquo; TV) could be grouped with the ratings (TV-G, TV-Y7, G, PG, TV-Y7-FV)\u003c/li\u003e\n  \u003cli\u003eWould coming up with an Integer value for each category and rating help you? Consider enum style encoding\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581982139592_739188310",
      "id": "20200217-232859_148096373",
      "dateCreated": "2020-02-17 23:28:59.592",
      "dateStarted": "2020-02-18 23:44:51.229",
      "dateFinished": "2020-02-18 23:44:51.277",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n// cache off the transformations in redis\n// this will simplify the work spark must do to read and work with this data\nnetflixDataByCategory\n  .select(\"show_id\", \"category\", \"rating\")\n  .write\n  .format(\"org.apache.spark.sql.redis\")\n  .option(\"table\", \"netflix_category_rating\")\n  .option(\"key.column\", \"show_id\")\n  .mode(\"overwrite\")\n  .save()",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:53.938",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581981750244_-172092310",
      "id": "20200217-232230_508070228",
      "dateCreated": "2020-02-17 23:22:30.244",
      "dateStarted": "2020-02-18 22:56:54.323",
      "dateFinished": "2020-02-18 22:56:59.717",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval netflixCategoryDataWithRatingSchema \u003d \"`show_id` BIGINT,`category` STRING, `rating` STRING\"\nval netflixCategoryStructSchema \u003d StructType.fromDDL(netflixCategoryDataWithRatingSchema)\n\nval contentWithCategories \u003d spark.read\n  .format(\"org.apache.spark.sql.redis\")\n  .schema(netflixCategoryStructSchema)\n  .option(\"key.column\", \"show_id\")\n  .option(\"table\", \"netflix_category_rating\")\n  .load()\n\ncontentWithCategories.createOrReplaceTempView(\"netflix_categories_rating\")",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:56:59.777",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581982920693_-2121392802",
      "id": "20200217-234200_1038448271",
      "dateCreated": "2020-02-17 23:42:00.693",
      "dateStarted": "2020-02-18 22:56:59.963",
      "dateFinished": "2020-02-18 22:57:00.941",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect * from netflix_categories_rating",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:57:01.022",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "show_id": "string",
                      "category": "string",
                      "rating": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581983576094_-769511835",
      "id": "20200217-235256_1918817600",
      "dateCreated": "2020-02-17 23:52:56.094",
      "dateStarted": "2020-02-18 22:57:01.771",
      "dateFinished": "2020-02-18 22:57:03.716",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Encoding the Category and Ratings Rows and Back Again\n1. Using StringIndexer to encode of Categories and Ratings to double values\n2. Using the IndexToString transformer we can get back to our original String Values!",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:44:54.898",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eEncoding the Category and Ratings Rows and Back Again\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eUsing StringIndexer to encode of Categories and Ratings to double values\u003c/li\u003e\n  \u003cli\u003eUsing the IndexToString transformer we can get back to our original String Values!\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581983738479_-969330448",
      "id": "20200217-235538_91488570",
      "dateCreated": "2020-02-17 23:55:38.479",
      "dateStarted": "2020-02-18 23:44:54.907",
      "dateFinished": "2020-02-18 23:44:54.952",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer}\nval categoryIndexer \u003d new StringIndexer()\n  .setHandleInvalid(\"keep\") // options are keep, skip, error\n  .setInputCol(\"category\")\n  .setOutputCol(\"category_index\")\n\nval ratingIndexer \u003d new StringIndexer()\n  .setHandleInvalid(\"keep\")\n  .setInputCol(\"rating\")\n  .setOutputCol(\"rating_index\")\n\nval invalidHandler \u003d ratingIndexer.handleInvalid\n\n// now we can index the categories by using a distinct on the dataset (contentWithCategories) since we fit to an arbitrary dataset\n\nval fittedCategoryIndexer \u003d categoryIndexer.fit(contentWithCategories.select(\"category\").distinct())\nval fittedRatingIndexer \u003d ratingIndexer.fit(contentWithCategories.select(\"rating\").distinct())\n\n// now we can call transform on our fitted indexers\n\nval contentWithIndexedCategories \u003d fittedCategoryIndexer.transform(contentWithCategories)\nval contentWithIndexedRatingsAndCategories \u003d fittedRatingIndexer.transform(contentWithIndexedCategories)\n\ncontentWithIndexedRatingsAndCategories.show(10, false)\n\nval categoryIndexConverter \u003d new IndexToString()\n  .setInputCol(\"category_index\")\n  .setOutputCol(\"category\")\n\nval ratingIndexConverter \u003d new IndexToString()\n  .setInputCol(\"rating_index\")\n  .setOutputCol(\"rating\")\n\nval converted \u003d categoryIndexConverter.transform(contentWithIndexedRatingsAndCategories\n  .drop(\"category\")\n  .drop(\"rating\")\n)\n\n\nval originalDataRestored \u003d ratingIndexConverter.transform(converted)\n\noriginalDataRestored.select(\"category\",\"category_index\").distinct.sort(asc(\"category\")).show(100, false)\noriginalDataRestored.select(\"rating\", \"rating_index\").distinct.sort(asc(\"rating\")).show(100, false)\noriginalDataRestored.show(10, false)\n\noriginalDataRestored.printSchema",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:57:04.088",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581984053260_-945874140",
      "id": "20200218-000053_1549107629",
      "dateCreated": "2020-02-18 00:00:53.260",
      "dateStarted": "2020-02-18 22:57:04.381",
      "dateFinished": "2020-02-18 22:57:38.459",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.OneHotEncoderEstimator\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.ml.evaluation.ClusteringEvaluator\n\n\nval encoder \u003d new OneHotEncoderEstimator()\n  .setInputCols(Array(\"category_index\",\"rating_index\"))\n  .setOutputCols(Array(\"category_vec\", \"rating_vec\"))\n\nval vectorAssembler \u003d new VectorAssembler()\n  .setInputCols(Array(\"category_vec\",\"rating_vec\"))\n  .setOutputCol(\"features\")\n\nval transformationPipeline \u003d new Pipeline()\n    .setStages(\n        Array(\n            encoder,\n            vectorAssembler\n        )\n    )\n\nval fittedPipeline \u003d transformationPipeline.fit(contentWithIndexedRatingsAndCategories)\n\nval transformed \u003d fittedPipeline.transform(contentWithIndexedRatingsAndCategories)\n\nval kmeans \u003d new KMeans().setK(4).setSeed(1L)\n\nval model \u003d kmeans.fit(transformed)\nval predictions \u003d model.transform(transformed)\n\n\nval evaluator \u003d new ClusteringEvaluator()\nval silhouette \u003d evaluator.evaluate(predictions)\n\nprintln(s\"Silhouette with squared euclidean distance \u003d $silhouette\")\n\n// Shows the result.\n/*println(\"Cluster Centers: \")\nmodel.clusterCenters.foreach(println)*/\n\npredictions.createOrReplaceTempView(\"predictions\")\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:57:38.496",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581984469837_-677502762",
      "id": "20200218-000749_2123107383",
      "dateCreated": "2020-02-18 00:07:49.837",
      "dateStarted": "2020-02-18 22:57:38.770",
      "dateFinished": "2020-02-18 22:58:02.729",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect show_id,category,rating,category_index,rating_index,prediction from predictions",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:59:00.472",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "show_id",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "category",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "rating",
                        "visible": true,
                        "width": "*",
                        "sort": {
                          "priority": 0.0,
                          "direction": "asc"
                        },
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "category_index",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "rating_index",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "prediction",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1.0,
                      "paginationPageSize": 250.0
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "show_id": "string",
                      "category": "string",
                      "rating": "string",
                      "category_index": "string",
                      "rating_index": "string",
                      "prediction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581985461194_1228356350",
      "id": "20200218-002421_520617772",
      "dateCreated": "2020-02-18 00:24:21.195",
      "dateStarted": "2020-02-18 22:58:03.113",
      "dateFinished": "2020-02-18 22:58:05.933",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect count(*) as total, rating, avg(prediction) as avg_prediction from predictions group by prediction, rating order by total desc",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:00:16.087",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "total": "string",
                      "rating": "string",
                      "avg_prediction": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581986844787_-1087594381",
      "id": "20200218-004724_73450539",
      "dateCreated": "2020-02-18 00:47:24.787",
      "dateStarted": "2020-02-18 23:00:08.261",
      "dateFinished": "2020-02-18 23:00:15.671",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Given that PG movies and NC-17 show up in the same cluster\n1. Set a Double value for Movies and Shows that are for kids, sensitive groups or anyone (0.0, 1.0, 2.0)\n2. Apply this transformation to enhance the clustering",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:44:59.676",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eGiven that PG movies and NC-17 show up in the same cluster\u003c/h3\u003e\n\u003col\u003e\n  \u003cli\u003eSet a Double value for Movies and Shows that are for kids, sensitive groups or anyone (0.0, 1.0, 2.0)\u003c/li\u003e\n  \u003cli\u003eApply this transformation to enhance the clustering\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581987578798_1957077259",
      "id": "20200218-005938_77894234",
      "dateCreated": "2020-02-18 00:59:38.798",
      "dateStarted": "2020-02-18 23:44:59.698",
      "dateFinished": "2020-02-18 23:44:59.785",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n/*\n+---------+------------+\n|rating   |rating_index|\n+---------+------------+\n|G        |6.0         |\n|TV-G     |11.0        |\n|TV-Y     |9.0         |\n|TV-Y7    |8.0         |\n|TV-Y7-FV |1.0         |\n\n|TV-PG    |0.0         |\n|PG       |4.0         |\n|PG-13    |2.0         |\n|TV-14    |12.0        |\n\n|NR       |10.0        |\n|R        |13.0        |\n|NC-17    |7.0         |\n|TV-MA    |3.0         |\n|UR       |5.0         |\n|__unknown|14.0        |\n+---------+------------+\n*/\nval SafeForKids \u003d Seq(1.0, 6.0,8.0,9.0,11.0)\nval SafeForMost \u003d Seq(0.0,4.0,2.0,12.0)\n\ndef withRatingClassification(df: DataFrame): DataFrame \u003d {\n  df.withColumn(\"rating_class\", when(col(\"rating_index\").isInCollection(SafeForKids), 0.0D).when(col(\"rating_index\").isInCollection(SafeForMost), 1.0D).otherwise(2.0D))\n}\n\nval contentWithRatingClassification \u003d contentWithIndexedRatingsAndCategories.transform(withRatingClassification)\ncontentWithRatingClassification.printSchema\ncontentWithRatingClassification.createOrReplaceTempView(\"rating_classification\")\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:58:14.689",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581986956646_-1040152714",
      "id": "20200218-004916_2094797846",
      "dateCreated": "2020-02-18 00:49:16.646",
      "dateStarted": "2020-02-18 22:58:15.023",
      "dateFinished": "2020-02-18 22:58:17.075",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect * from rating_classification",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:58:17.122",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "show_id": "string",
                      "category": "string",
                      "rating": "string",
                      "category_index": "string",
                      "rating_index": "string",
                      "rating_class": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581988466454_-1053771712",
      "id": "20200218-011426_1926739301",
      "dateCreated": "2020-02-18 01:14:26.454",
      "dateStarted": "2020-02-18 22:58:17.556",
      "dateFinished": "2020-02-18 22:58:20.326",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nimport org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.feature.OneHotEncoderEstimator\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.ml.evaluation.ClusteringEvaluator\n\n\nval encodeRatings \u003d new OneHotEncoderEstimator()\n  .setInputCols(Array(\"category_index\",\"rating_index\",\"rating_class\"))\n  .setOutputCols(Array(\"category_vec\",\"rating_vec\",\"rating_class_vec\"))\n\nval vectorAssemblerRatings \u003d new VectorAssembler()\n  .setInputCols(Array(\"category_vec\",\"rating_vec\",\"rating_class_vec\"))\n  .setOutputCol(\"features\")\n\n/*\n// vectorAssemblerRatingsNonEncoded\n// if you use the non OneHotEncoded values (basically the inputCols to the encodeRatings) then you will see\n// the clusters change for the worse. You will have TV-MA alongside TV-G which could be bad news for recommendations\nval vectorAssemblerRatingsNonEncoded \u003d new VectorAssembler()\n  .setInputCols(Array(\"category_index\",\"rating_index\",\"rating_class\"))\n  .setOutputCol(\"features\")\n*/\n\nval transformationPipelineRatings \u003d new Pipeline()\n    .setStages(\n        Array(\n            encodeRatings,\n            vectorAssemblerRatings\n        )\n    )\n/*\n// use this pipeline with the non-encoded Vector to see how the clusters differ\nval transformationPipelineRatings \u003d new Pipeline()\n    .setStages(Array(vectorAssemblerRatingsNonEncoded))\n*/\n\nval fittedPipelineRatings \u003d transformationPipelineRatings.fit(contentWithRatingClassification)\n\nval transformedRatings \u003d fittedPipelineRatings.transform(contentWithRatingClassification)\n\nval kmeans \u003d new KMeans().setK(6).setSeed(1L)\n\nval modelN \u003d kmeans.fit(transformedRatings)\nval predictionsN \u003d modelN.transform(transformedRatings)\n\n\n//val evaluator \u003d new ClusteringEvaluator()\n//val silhouette \u003d evaluator.evaluate(predictionsN)\n\n//println(s\"Silhouette with squared euclidean distance \u003d $silhouette\")\n\n// Shows the result.\n/*println(\"Cluster Centers: \")\nmodel.clusterCenters.foreach(println)*/\n\npredictionsN.createOrReplaceTempView(\"predictions_new\")\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:33:35.278",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581988499770_-1638895390",
      "id": "20200218-011459_857208590",
      "dateCreated": "2020-02-18 01:14:59.770",
      "dateStarted": "2020-02-18 23:29:33.781",
      "dateFinished": "2020-02-18 23:29:49.831",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect count(*) as total, category, rating, rating_class, avg(prediction) as cluster from predictions_new group by category, rating, rating_class order by cluster desc",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:33:35.472",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "total",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "category",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "rating",
                        "visible": true,
                        "width": "*",
                        "sort": {
                          "priority": 2.0,
                          "direction": "asc"
                        },
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "rating_class",
                        "visible": true,
                        "width": "*",
                        "sort": {
                          "priority": 1.0,
                          "direction": "asc"
                        },
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "cluster",
                        "visible": true,
                        "width": "*",
                        "sort": {
                          "priority": 0.0,
                          "direction": "desc"
                        },
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1.0,
                      "paginationPageSize": 250.0
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "total": "string",
                      "category": "string",
                      "rating": "string",
                      "rating_class": "string",
                      "cluster": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "scatterChart": {
                  "xAxis": {
                    "name": "rating_class",
                    "index": 3.0,
                    "aggr": "sum"
                  },
                  "yAxis": {
                    "name": "cluster",
                    "index": 4.0,
                    "aggr": "sum"
                  },
                  "size": {
                    "name": "total",
                    "index": 0.0,
                    "aggr": "sum"
                  },
                  "group": {
                    "name": "rating",
                    "index": 2.0,
                    "aggr": "sum"
                  }
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": true
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "cluster",
                  "index": 4.0,
                  "aggr": "sum"
                },
                {
                  "name": "rating_class",
                  "index": 3.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "rating",
                  "index": 2.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "total",
                  "index": 0.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581988701725_316122778",
      "id": "20200218-011821_210464661",
      "dateCreated": "2020-02-18 01:18:21.725",
      "dateStarted": "2020-02-18 23:33:35.600",
      "dateFinished": "2020-02-18 23:33:42.416",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## What we learned\n1. Unsupervised Learning Methods can help you group your data logically and help you see emerging patterns\n2. With some additional Domain knownledge you can help assist the models to automatically group data into sub-clusters (in our case we added the 3 grouping parameters to see how the additional feature `rating_class` could help)\n3. Using OneHotEncoderEstimator with StringIndexer indices (category_index, rating_index) along with our rating_class performs better clustering\n\n## Next Steps (http://localhost:8080/#/notebook/2F3D4HQRX)\nWe will be learning how to do binary classification on our dataset using LogisticRegression\n1. LogisticRegression is a great classification algorithm for predicting a binary label (eg. hotdog / not a hotdog)\n2. In our case we are going to modify the Netflix Movies data using what we\u0027ve learned to predict if a movie is safe for kids\n3. The idea is to train the model using the rating_class, rating_index, category_index as well as some indexed keywords from the Movie descriptions\n4. Let\u0027s get going!",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:44:33.911",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eWhat we learned\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eUnsupervised Learning Methods can help you group your data logically and help you see emerging patterns\u003c/li\u003e\n  \u003cli\u003eWith some additional Domain knownledge you can help assist the models to automatically group data into sub-clusters (in our case we added the 3 grouping parameters to see how the additional feature \u003ccode\u003erating_class\u003c/code\u003e could help)\u003c/li\u003e\n  \u003cli\u003eUsing OneHotEncoderEstimator with StringIndexer indices (category_index, rating_index) along with our rating_class performs better clustering\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eNext Steps (\u003ca href\u003d\"http://localhost:8080/#/notebook/2F3D4HQRX\"\u003ehttp://localhost:8080/#/notebook/2F3D4HQRX\u003c/a\u003e)\u003c/h2\u003e\n\u003cp\u003eWe will be learning how to do binary classification on our dataset using LogisticRegression\u003cbr/\u003e1. LogisticRegression is a great classification algorithm for predicting a binary label (eg. hotdog / not a hotdog)\u003cbr/\u003e2. In our case we are going to modify the Netflix Movies data using what we\u0026rsquo;ve learned to predict if a movie is safe for kids\u003cbr/\u003e3. The idea is to train the model using the rating_class, rating_index, category_index as well as some indexed keywords from the Movie descriptions\u003cbr/\u003e4. Let\u0026rsquo;s get going!\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581989254471_-523162613",
      "id": "20200218-012734_311657560",
      "dateCreated": "2020-02-18 01:27:34.471",
      "dateStarted": "2020-02-18 23:44:33.915",
      "dateFinished": "2020-02-18 23:44:34.028",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:35:17.261",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1582068917257_1727738054",
      "id": "20200218-233517_110618632",
      "dateCreated": "2020-02-18 23:35:17.258",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "2-LoadTransformAndCluster",
  "id": "2F2V5NYHF",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}