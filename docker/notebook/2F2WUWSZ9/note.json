{
  "paragraphs": [
    {
      "text": "%spark\n// view all of the load configuration\nspark.sparkContext.getConf.getAll.foreach(println)\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:49:01.753",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581972430671_1558415188",
      "id": "20200217-204710_1857051027",
      "dateCreated": "2020-02-17 20:47:10.671",
      "dateStarted": "2020-02-18 22:49:02.547",
      "dateFinished": "2020-02-18 22:50:39.654",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Import, Clean and Save Dataset\nThis notebook uses the Netflix Movies and Shows dataset to show the following processes.\n1. importing csv data\n2. basic first pass cleaning of the imported data",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:20.617",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eImport, Clean and Save Dataset\u003c/h2\u003e\n\u003cp\u003eThis notebook uses the Netflix Movies and Shows dataset to show the following processes.\u003cbr/\u003e1. importing csv data\u003cbr/\u003e2. basic first pass cleaning of the imported data\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581965700808_1521096499",
      "id": "20200217-185500_1156513021",
      "dateCreated": "2020-02-17 18:55:00.808",
      "dateStarted": "2020-02-18 23:45:20.631",
      "dateFinished": "2020-02-18 23:45:20.735",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n\nimport spark.implicits._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.types._\n\nfinal val BaseFilePath \u003d \"file:///learn\"\nfinal val NetflixTitlesRaw \u003d \"/netflix/netflix_titles_raw.csv\"\nfinal val NetflixTitlesFormatted \u003d \"/netflix/netflix_titles.csv\"\n\nval netflixData \u003d spark.read\n  //.option(\"mode\", \"FAILFAST\")\n  //.option(\"mode\", \"DROPMALFORMED\")\n  .option(\"header\", \"true\")\n  .option(\"inferSchema\", \"true\")\n  .option(\"encoding\", \"UTF-8\")\n  .csv(s\"$BaseFilePath/$NetflixTitlesFormatted\")\n\n// see the underlying inferredSchema\nnetflixData.printSchema\nval inferredSchema \u003d netflixData.schema\nnetflixData.createOrReplaceTempView(\"netflix_raw\")\nspark.sql(\"show tables\").show\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:50:46.518",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581908494839_-1724626913",
      "id": "20200217-030134_1605725597",
      "dateCreated": "2020-02-17 03:01:34.839",
      "dateStarted": "2020-02-18 22:50:47.371",
      "dateFinished": "2020-02-18 22:51:09.375",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\ninferredSchema",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:09.404",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581966444140_1740028017",
      "id": "20200217-190724_560223682",
      "dateCreated": "2020-02-17 19:07:24.140",
      "dateStarted": "2020-02-18 22:51:09.816",
      "dateFinished": "2020-02-18 22:51:10.750",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval strictSchema \u003d StructType(\n    Seq(\n        StructField(\"show_id\",LongType,nullable\u003dfalse),\n        StructField(\"type\",StringType,nullable\u003dfalse),\n        StructField(\"title\",StringType,nullable\u003dfalse),\n        StructField(\"director\",StringType,true),\n        StructField(\"cast\",StringType,true),\n        StructField(\"country\", StringType, true),\n        StructField(\"date_added\",StringType,nullable\u003dfalse),\n        StructField(\"release_year\",IntegerType,nullable\u003dfalse),\n        StructField(\"rating\",StringType,true),\n        StructField(\"duration\",StringType,nullable\u003dfalse),\n        StructField(\"listed_in\",StringType,true),\n        StructField(\"description\",StringType,true)\n    )\n)\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:10.833",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581966464357_880956063",
      "id": "20200217-190744_1521736757",
      "dateCreated": "2020-02-17 19:07:44.357",
      "dateStarted": "2020-02-18 22:51:11.471",
      "dateFinished": "2020-02-18 22:51:12.412",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Reimport the Netflix Movie Data using our StructType\nThis will allow us to force the underlying casting from csv strings to value types",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:25.436",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eReimport the Netflix Movie Data using our StructType\u003c/h2\u003e\n\u003cp\u003eThis will allow us to force the underlying casting from csv strings to value types\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581966682732_-71118177",
      "id": "20200217-191122_1931889542",
      "dateCreated": "2020-02-17 19:11:22.732",
      "dateStarted": "2020-02-18 23:45:25.437",
      "dateFinished": "2020-02-18 23:45:25.479",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n//https://docs.databricks.com/data/data-sources/read-csv.html\nval netflixDataStrict \u003d spark.read\n  //.option(\"mode\", \"FAILFAST\")\n  .option(\"mode\", \"DROPMALFORMED\")\n  .option(\"header\", \"true\")\n  .option(\"sep\", \",\")\n  .option(\"quote\", \"\\\"\")\n  .option(\"inferSchema\", \"false\")\n  .schema(strictSchema)\n  .option(\"encoding\", \"UTF-8\")\n  .csv(s\"$BaseFilePath/$NetflixTitlesFormatted\")\n\nnetflixDataStrict.createOrReplaceTempView(\"netflix\")\n\nnetflixDataStrict.printSchema\n\nspark.sql(\"desc netflix\").show()\n\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:13.081",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581966678231_-2105489626",
      "id": "20200217-191118_1287888444",
      "dateCreated": "2020-02-17 19:11:18.231",
      "dateStarted": "2020-02-18 22:51:13.471",
      "dateFinished": "2020-02-18 22:51:15.112",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect * from netflix",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:15.212",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "show_id",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "type",
                        "visible": true,
                        "width": "*",
                        "sort": {
                          "priority": 0.0,
                          "direction": "desc"
                        },
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "title",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "director",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "cast",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "country",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "date_added",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "release_year",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "rating",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "duration",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "listed_in",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "description",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1.0,
                      "paginationPageSize": 250.0
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "show_id": "string",
                      "type": "string",
                      "title": "string",
                      "director": "string",
                      "cast": "string",
                      "country": "string",
                      "date_added": "string",
                      "release_year": "string",
                      "rating": "string",
                      "duration": "string",
                      "listed_in": "string",
                      "description": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581909404670_-2110768416",
      "id": "20200217-031644_1464153607",
      "dateCreated": "2020-02-17 03:16:44.670",
      "dateStarted": "2020-02-18 22:51:15.520",
      "dateFinished": "2020-02-18 22:51:17.454",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect distinct(type) as distinct_type from netflix_raw",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:17.522",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "distinct_type": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581965566980_1345691952",
      "id": "20200217-185246_2018291567",
      "dateCreated": "2020-02-17 18:52:46.980",
      "dateStarted": "2020-02-18 22:51:17.839",
      "dateFinished": "2020-02-18 22:51:26.731",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect count(*) as total from netflix_raw where type NOT IN (\"Movie\", \"TV Show\")",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:26.816",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "total": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581909417451_-1122812653",
      "id": "20200217-031657_990985109",
      "dateCreated": "2020-02-17 03:16:57.451",
      "dateStarted": "2020-02-18 22:51:27.141",
      "dateFinished": "2020-02-18 22:51:28.503",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Using Intersect and Except on Two DataFrames\nGain more control over conditional where clauses\n1. Sometimes reducing one DataFrame by another is easier than a complex query",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:28.856",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eUsing Intersect and Except on Two DataFrames\u003c/h2\u003e\n\u003cp\u003eGain more control over conditional where clauses\u003cbr/\u003e1. Sometimes reducing one DataFrame by another is easier than a complex query\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581967683775_-77496244",
      "id": "20200217-192803_1317904078",
      "dateCreated": "2020-02-17 19:28:03.776",
      "dateStarted": "2020-02-18 23:45:28.859",
      "dateFinished": "2020-02-18 23:45:28.886",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nval cleanTypes \u003d netflixData.select(\"*\").where(col(\"type\").isInCollection(Seq(\"Movie\", \"TV Show\")))\n\nval cleaned \u003d cleanTypes.count\nval all \u003d netflixDataStrict.count\n\n// this can be more complex logic - for simplicity this is basically a `select * from netflix where id NOT IN (select show_id from netflix where type \u003d \u0027Movie\u0027)`\nval intersection \u003d netflixDataStrict.intersect(cleanTypes.where(col(\"type\").equalTo(\"Movie\")))\nval tvShows \u003d netflixDataStrict.except(intersection)\ntvShows.sort(asc(\"show_id\")).show()",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:28.876",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581965467050_-1519055715",
      "id": "20200217-185107_1066365658",
      "dateCreated": "2020-02-17 18:51:07.050",
      "dateStarted": "2020-02-18 22:51:29.346",
      "dateFinished": "2020-02-18 22:51:45.231",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n#### Using a Subquery to reduce your Data (The SQL Way)",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:32.383",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eUsing a Subquery to reduce your Data (The SQL Way)\u003c/h4\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581968075623_-1063110976",
      "id": "20200217-193435_429853298",
      "dateCreated": "2020-02-17 19:34:35.623",
      "dateStarted": "2020-02-18 23:45:32.393",
      "dateFinished": "2020-02-18 23:45:32.433",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect * from netflix where show_id NOT IN (\n  select show_id from netflix where type \u003d \u0027Movie\u0027\n  ) order by show_id asc limit 10",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:45.754",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "show_id": "string",
                      "type": "string",
                      "title": "string",
                      "director": "string",
                      "cast": "string",
                      "country": "string",
                      "date_added": "string",
                      "release_year": "string",
                      "rating": "string",
                      "duration": "string",
                      "listed_in": "string",
                      "description": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581967936821_-1370575092",
      "id": "20200217-193216_501874182",
      "dateCreated": "2020-02-17 19:32:16.821",
      "dateStarted": "2020-02-18 22:51:46.115",
      "dateFinished": "2020-02-18 22:51:51.645",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Investigate the Duration Attributes of Movies and TV Shows\n1. Given that a Movie has a set time in minutes, we should not see Seasons\n2. Given that a TV Show has one or more seasons, we should not see the number of minutes",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:41.369",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eInvestigate the Duration Attributes of Movies and TV Shows\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eGiven that a Movie has a set time in minutes, we should not see Seasons\u003c/li\u003e\n  \u003cli\u003eGiven that a TV Show has one or more seasons, we should not see the number of minutes\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581973431816_-1260532512",
      "id": "20200217-210351_296901661",
      "dateCreated": "2020-02-17 21:03:51.816",
      "dateStarted": "2020-02-18 23:45:41.401",
      "dateFinished": "2020-02-18 23:45:41.438",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nnetflixDataStrict.select(\"duration\").where(col(\"type\").equalTo(\"Movie\")).describe().show\nnetflixDataStrict.select(\"duration\").where(col(\"type\").equalTo(\"TV Show\")).describe().show",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:52.027",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581909483884_-47288075",
      "id": "20200217-031803_1010784132",
      "dateCreated": "2020-02-17 03:18:03.884",
      "dateStarted": "2020-02-18 22:51:52.289",
      "dateFinished": "2020-02-18 22:51:55.602",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### GroupBy and Aggregations and Messing with Time\nThe ability to easily group your data enables better exploration of the underlying data.\n1. What is interesting to you? I think the ability to groupBy year/month/day and by categroy could be nice\n2. Let us add DateTime, year, month, day to our Data for the time dimensions\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:43.716",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eGroupBy and Aggregations and Messing with Time\u003c/h3\u003e\n\u003cp\u003eThe ability to easily group your data enables better exploration of the underlying data.\u003cbr/\u003e1. What is interesting to you? I think the ability to groupBy year/month/day and by categroy could be nice\u003cbr/\u003e2. Let us add DateTime, year, month, day to our Data for the time dimensions\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581968177838_-1759741770",
      "id": "20200217-193617_446931921",
      "dateCreated": "2020-02-17 19:36:17.838",
      "dateStarted": "2020-02-18 23:45:43.742",
      "dateFinished": "2020-02-18 23:45:43.815",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n\nval netflixWithTimeDimension \u003d netflixDataStrict\n  .withColumn(\"datetime\", functions.to_timestamp(col(\"date_added\"), \"MMMMM dd, yyyy\"))\n  .withColumn(\"release_month\", functions.date_format(col(\"datetime\"), \"M\"))\n  .withColumn(\"release_day\", functions.date_format(col(\"datetime\"), \"d\"))\n\nval newTableDDL \u003d netflixWithTimeDimension.schema.toDDL",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:55.995",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581910487758_-377633272",
      "id": "20200217-033447_744550695",
      "dateCreated": "2020-02-17 03:34:47.758",
      "dateStarted": "2020-02-18 22:51:56.288",
      "dateFinished": "2020-02-18 22:51:57.447",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\nnetflixWithTimeDimension.createOrReplaceTempView(\"netflix_dates\")",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:57.483",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581968694741_2087947693",
      "id": "20200217-194454_777161162",
      "dateCreated": "2020-02-17 19:44:54.741",
      "dateStarted": "2020-02-18 22:51:57.903",
      "dateFinished": "2020-02-18 22:51:58.390",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect * from netflix_dates limit 10",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:58.490",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "show_id": "string",
                      "type": "string",
                      "title": "string",
                      "director": "string",
                      "cast": "string",
                      "country": "string",
                      "date_added": "string",
                      "release_year": "string",
                      "rating": "string",
                      "duration": "string",
                      "listed_in": "string",
                      "description": "string",
                      "datetime": "string",
                      "release_month": "string",
                      "release_day": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581968790022_791360108",
      "id": "20200217-194630_497167087",
      "dateCreated": "2020-02-17 19:46:30.022",
      "dateStarted": "2020-02-18 22:51:58.701",
      "dateFinished": "2020-02-18 22:51:59.457",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Explore the Data\n1. What trends do you see in terms of release year?\n2. What kind of Movies and TV Shows seem most successful?",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:47.247",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eExplore the Data\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eWhat trends do you see in terms of release year?\u003c/li\u003e\n  \u003cli\u003eWhat kind of Movies and TV Shows seem most successful?\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581969692746_-272117493",
      "id": "20200217-200132_1397657913",
      "dateCreated": "2020-02-17 20:01:32.746",
      "dateStarted": "2020-02-18 23:45:47.264",
      "dateFinished": "2020-02-18 23:45:47.303",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect type, country, release_day, release_month, release_year, rating from netflix_dates",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:51:59.945",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "multiBarChart",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "type": "string",
                      "country": "string",
                      "release_day": "string",
                      "release_month": "string",
                      "release_year": "string",
                      "rating": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                },
                "multiBarChart": {
                  "rotate": {
                    "degree": "-45"
                  },
                  "xLabelStatus": "default",
                  "stacked": true
                }
              },
              "commonSetting": {},
              "keys": [
                {
                  "name": "release_year",
                  "index": 4.0,
                  "aggr": "sum"
                }
              ],
              "groups": [
                {
                  "name": "rating",
                  "index": 5.0,
                  "aggr": "sum"
                }
              ],
              "values": [
                {
                  "name": "release_year",
                  "index": 4.0,
                  "aggr": "sum"
                }
              ]
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581969511500_-1498829913",
      "id": "20200217-195831_968461139",
      "dateCreated": "2020-02-17 19:58:31.500",
      "dateStarted": "2020-02-18 22:52:00.244",
      "dateFinished": "2020-02-18 22:52:03.603",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Exercize: Investigate the Netflix Data\n1. Try seeing if the patterns of release changes for TV Shows or Movies\n2. What seems to be the best time of year to release a new Show?\n3. Is there anything interesting you can find?",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:49.789",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eExercize: Investigate the Netflix Data\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eTry seeing if the patterns of release changes for TV Shows or Movies\u003c/li\u003e\n  \u003cli\u003eWhat seems to be the best time of year to release a new Show?\u003c/li\u003e\n  \u003cli\u003eIs there anything interesting you can find?\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581973634121_-1570421092",
      "id": "20200217-210714_635476476",
      "dateCreated": "2020-02-17 21:07:14.121",
      "dateStarted": "2020-02-18 23:45:49.852",
      "dateFinished": "2020-02-18 23:45:49.976",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Saving your hardwork into Redis\n1. Saving the Data as Binary (Serialized) or not Serialized\n2. Look at the underlying Redis Data (keys *)\n3. Debug the Object size",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:52.594",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eSaving your hardwork into Redis\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eSaving the Data as Binary (Serialized) or not Serialized\u003c/li\u003e\n  \u003cli\u003eLook at the underlying Redis Data (keys *)\n\u003c/li\u003e\n  \u003cli\u003eDebug the Object size\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581973751742_-492723057",
      "id": "20200217-210911_612088093",
      "dateCreated": "2020-02-17 21:09:11.742",
      "dateStarted": "2020-02-18 23:45:52.626",
      "dateFinished": "2020-02-18 23:45:52.668",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n// write the updated data to redis\n// use binary serialization to reduce the cost of storing this data in redis\nnetflixWithTimeDimension\n  .write\n  .format(\"org.apache.spark.sql.redis\")\n  .option(\"table\", \"netflix\")\n  .option(\"model\", \"binary\")\n  .option(\"key.column\", \"show_id\")\n  .save()",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:52:04.850",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581969862034_172107177",
      "id": "20200217-200422_822772128",
      "dateCreated": "2020-02-17 20:04:22.034",
      "dateStarted": "2020-02-18 22:52:05.082",
      "dateFinished": "2020-02-18 22:52:10.955",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark\n// the non-binary model type will save all the fields of the data to a hash map and use the show_id as the redis key\n// you can use the .option(\"ttl\", 300) to have the data expire in 300 seconds\nnetflixWithTimeDimension\n  .write\n  .format(\"org.apache.spark.sql.redis\")\n  .option(\"table\", \"netflix_norm\")\n  .option(\"key.column\", \"show_id\")\n  //.option(\"ttl\", 300)\n  //.mode(\"errorIfExists\")\n  .mode(\"overwrite\")\n  .save()",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:52:10.976",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1581973864830_-1492280563",
      "id": "20200217-211104_1888754872",
      "dateCreated": "2020-02-17 21:11:04.830",
      "dateStarted": "2020-02-18 22:52:11.150",
      "dateFinished": "2020-02-18 22:52:14.863",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Let us inspect the data using Redis CLI\n1. Open up a new terminal window. `docker exec -it redis5 redis-cli`\n2. View all of the Keys. `keys *`\n3. Take a look at the Serialized Size of the Data. `debug object netflix_norm:80123742` and `debug object netflix:80123742`\n4. If you want to remove all keys `flushall`. Note: Flushall will delete everything and let you start over",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:57.053",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eLet us inspect the data using Redis CLI\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eOpen up a new terminal window. \u003ccode\u003edocker exec -it redis5 redis-cli\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eView all of the Keys. \u003ccode\u003ekeys *\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eTake a look at the Serialized Size of the Data. \u003ccode\u003edebug object netflix_norm:80123742\u003c/code\u003e and \u003ccode\u003edebug object netflix:80123742\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eIf you want to remove all keys \u003ccode\u003eflushall\u003c/code\u003e. Note: Flushall will delete everything and let you start over\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581968806861_649279696",
      "id": "20200217-194646_1512046072",
      "dateCreated": "2020-02-17 19:46:46.861",
      "dateStarted": "2020-02-18 23:45:57.063",
      "dateFinished": "2020-02-18 23:45:57.101",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Next Up http://localhost:8080/#/notebook/2F2V5NYHF\n1. Loading the data back from redis.\n2. Extracting out all the categories from the `listed_in` column.\n3. Running some basic clustering by movie category.\n\n[Next Section - 2-LoadTransformAndCluster](http://localhost:8080/#/notebook/2F2V5NYHF)\n\nSee the [documentation on the DataFrames spark-redis options](https://github.com/RedisLabs/spark-redis/blob/master/doc/dataframe.md) for more information",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 23:45:59.370",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eNext Up \u003ca href\u003d\"http://localhost:8080/#/notebook/2F2V5NYHF\"\u003ehttp://localhost:8080/#/notebook/2F2V5NYHF\u003c/a\u003e\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eLoading the data back from redis.\u003c/li\u003e\n  \u003cli\u003eExtracting out all the categories from the \u003ccode\u003elisted_in\u003c/code\u003e column.\u003c/li\u003e\n  \u003cli\u003eRunning some basic clustering by movie category.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003ca href\u003d\"http://localhost:8080/#/notebook/2F2V5NYHF\"\u003eNext Section - 2-LoadTransformAndCluster\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSee the \u003ca href\u003d\"https://github.com/RedisLabs/spark-redis/blob/master/doc/dataframe.md\"\u003edocumentation on the DataFrames spark-redis options\u003c/a\u003e for more information\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1581974198371_-822610387",
      "id": "20200217-211638_157640842",
      "dateCreated": "2020-02-17 21:16:38.371",
      "dateStarted": "2020-02-18 23:45:59.378",
      "dateFinished": "2020-02-18 23:45:59.404",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2020-02-18 22:52:15.157",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1582066335152_-910541639",
      "id": "20200218-225215_1292812627",
      "dateCreated": "2020-02-18 22:52:15.153",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "1-LoadAndQuery",
  "id": "2F2WUWSZ9",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}